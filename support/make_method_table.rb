#!/usr/bin/env ruby
# coding: utf-8
#
# create built-in method table include file.
#
#  Copyright (C) 2015-2021 Kyushu Institute of Technology.
#  Copyright (C) 2015-2021 Shimane IT Open-Innovation Center.
#
#  This file is distributed under BSD 3-Clause License.
#
# (usage)
# ruby make_method_table.rb TARGET_CLASS_FILE.c
#

require_relative "common_sub"


##
# output header file
#
def output_header_file( param )
  flag_error = false
  param[:methods].sort_by! {|m| m[:name] }

  begin
    file = File.open( strip_double_quot(param[:file]), "w" )
  rescue Errno::ENOENT
    puts "File can't open. #{param[:file]}"
    return false
  end

  file.puts "/* Auto generated by make_method_table.rb */"
  file.puts "#include \"symbol_builtin.h\""

  #
  # write method symbol table and method function table.
  #
  if param[:methods].size > 0
    file.puts "static const mrbc_sym method_symbols_#{param[:class]}[] = {"
    param[:methods].each {|m|
      file.puts m[:if_exp].join  if m[:if_exp]
      file.puts "  MRBC_SYM(#{rename_for_symbol(m[:name])}),"
      m[:if_exp].size.times { file.puts "#endif" }  if m[:if_exp]
    }
    file.puts "};"

    file.puts "static const mrbc_func_t method_functions_#{param[:class]}[] = {"
    param[:methods].each {|m|
      file.puts m[:if_exp].join  if m[:if_exp]
      file.puts "  #{m[:func]},"
      m[:if_exp].size.times { file.puts "#endif" }  if m[:if_exp]
    }
    file.puts "};"
    file.puts
  end

  #
  # write Class struct.
  #
  struct_name = param[:methods].size > 0 ? "RBuiltinClass" : "RClass"
  file.puts "struct #{struct_name} mrbc_class_#{param[:class]} = {"
  file.puts "  .sym_id = MRBC_SYM(#{param[:class]}),"
  file.puts "  .num_builtin_method = " + (param[:methods].size > 0 ?
        "sizeof(method_symbols_#{param[:class]}) / sizeof(mrbc_sym)," : "0,")
  file.puts "#if defined(MRBC_DEBUG)"
  file.puts "  .names = \"#{param[:class]}\","
  file.puts "#endif"

  sp = case param[:super]
       when nil
         "MRBC_CLASS(Object)"
       when /^[A-Z][A-Za-z0-9]+$/
         "MRBC_CLASS(#{param[:super]})"
       else
         param[:super]
       end

  file.puts "  .super = #{sp},"
  file.puts "  .method_link = 0,"
  if param[:methods].size > 0
    file.puts "  .method_symbols = method_symbols_#{param[:class]},"
    file.puts "  .method_functions = method_functions_#{param[:class]},"
  end
  file.puts "};"

  file.close
end


##
# main
#
if !ARGV[0]
  puts <<EOL
(usage)
ruby make_method_table.rb TARGET_CLASS_FILE.c
EOL
  exit 1
end
filename = ARGV[0]

begin
  file = File.open( filename )
rescue Errno::ENOENT
  puts "File not found. '#{filename}'"
  exit 1
end

src = get_method_table_source( file )
if !src
  puts %!Magic comment "MRBC_AUTOGEN_METHOD_TABLE" is not found. '#{filename}'!
  exit 1
end

while src
  param = parse_source_string( src )
  exit 1 if !param
  exit 1 if !check_error( param )
  output_header_file( param )

  src = get_method_table_source( file )
end
